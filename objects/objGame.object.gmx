<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-3</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();
selected = noone
scrollSpeed = 3 * (60/room_speed)

justStartingInside = true;
justStartingOutside = true;

//improvements
artCount = 0
brickCount = 0
glassCount = 0

win = false;

//for drawing the UI
//energy bars
manList = ds_list_create()
//resource list
sprArray[0] = sprWood
sprArray[1] = sprRocks
sprArray[2] = sprCarrots
sprArray[3] = sprSap
sprArray[4] = sprGem
sprArray[5] = sprFur
sprArray[6] = sprEcto
//food
stewCount = 0
gourmetCount = 0

//resource count
resources[WOOD] = 99;
resources[ROCK] = 99;
resources[FOOD] = 99;
resources[SAP] = 99;
resources[GEM] = 99;
resources[FUR] = 99;
resources[ECTO] = 99;

//tool stuff
bought[AXE] = false;
bought[PICK] = false;
bought[SPEAR] = false;
stored[AXE] = 0;
stored[PICK] = 0;
stored[SPEAR] = 0;
held[AXE] = 0;
held[PICK] = 0;
held[SPEAR] = 0;


//view parameters
viewwMin = view_wview/2
viewhMin = view_hview/2
viewwMax = view_wview*2
viewhMax = view_hview*2

//smaller = faster
zoomSpeed = 5

//If not noone, begin transitioning to new room
newRoom = noone;

//How many new guys to add at end of day
newPersonCount = 0;

fadeAlpha = 1;
fadeDirection = -1;  //1 for in, -1 for out, 0 for nothing
fadeOut = true; //true for in, false for out
fadeSpeed = 0.01;

endOfDayAlpha = 0;
endOfDayDirection = 0;
endOfDaySpeed = 0.05;

isNewDay = false;
endOfDay = false;
endOfDayScreenTime = .5 * room_speed;
fadeScreenTime = 2.5 * room_speed;
roomTransitionSurface = surface_create(3200, 1024);
needsResourcePlacement = true;

spooksterCount = 0;
maxSpooksterCount = 4;
spooksterSpawnTimer = 0;

spooksterSpawnCooldown = 30 * room_speed;   //min time between spawns
spooksterSpawnTimer = 0;                    //only check for spawn once a second
spooksterCount = 0;

//Max number of ghosts per time of day
maxSpooksterCount[DAWN]     = 1;
maxSpooksterCount[DAY]      = 2;
maxSpooksterCount[DUSK]     = 3;
maxSpooksterCount[NIGHT]    = 4;

//Chance to spawn ghost per second
spooksterSpawnChance[DAWN]  = 0.015;
spooksterSpawnChance[DAY]   = 0.02; 
spooksterSpawnChance[DUSK]  = 0.025; 
spooksterSpawnChance[NIGHT] = 0.03;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>endOfDayDirection = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>fadeDirection = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(room == Outside and !instance_exists(objNightCycle))
{
    instance_create(0,0,objNightCycle);
}

scrGetKeyboardInput();

//scroll faster the farther out you have zoomed
var scrollIntensity = view_wview / viewwMin

//scroll view
if right {
    view_xview += scrollSpeed * scrollIntensity
} else if left {
    view_xview -= scrollSpeed * scrollIntensity
}

//zoom view
scrZoomView()

//cant go that far
scrClampView()

//spawns spooksters
scrSpawnSpooksters();

if(fadeDirection == 1)
{
    fadeAlpha += fadeSpeed;
    if(fadeAlpha &gt;= 1.0)
    {
        if(newRoom != noone)
        {
            room_goto(newRoom);
            newRoom = noone;
            fadeDirection = -1;
        }
        else if(endOfDay)
        {
            fadeDirection = 0;
            endOfDayDirection = 1;
            needsResourcePlacement = true;
            objNightCycle.currentTime = objNightCycle.dawnStartTime;
            if(room == Outside)
            {
                room_goto(Inside);
            }
            else {
                room_restart();
            }
            alarm[0] = fadeScreenTime;
        }
        else if(win)
        {
            room_goto(WinRoom);
        }
    }
}
else if(fadeDirection == -1)
{
    fadeAlpha -= fadeSpeed;
    if(fadeAlpha &lt;= 0.0)
    {
        fadeAlpha = 0;
        fadeDirection = 0;
        
        if(newRoom == room)
        {
            newRoom = noone;
            fadeDirection = 1;
        }
        if(endOfDay)
        {
            endOfDay = false;
        }
    }
}

if(endOfDayDirection == 1)
{
    endOfDayAlpha += fadeSpeed;
    if(endOfDayAlpha &gt;= 1.0)
    {
        endOfDayDirection = 0;
        alarm[1] = endOfDayScreenTime;
    }
}
else if(endOfDayDirection == -1)
{
    //Use alpha speed here to sync with black fade
    endOfDayAlpha -= fadeSpeed;
    if(endOfDayAlpha &lt;= 0.0)
    {
        endOfDayDirection = 0;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="54">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//inspires if someone is selected
if selected != noone {
    //delete existing waypoints for the selected dude
    if instance_exists(objWaypoint) {
        with objWaypoint {
            if owner == objGame.selected {
                with myIndicator {
                    instance_destroy()
                }
                instance_destroy()
            }
        }
    }
    //create new
    var waypointHeight = room_height - 32 - sprite_get_height(sprWaypoint);
    objGame.selected.waypoint = instance_create(mouse_x, waypointHeight, objWaypoint)
    
    //inspire man
    if instance_exists(objMan) {
        with objGame.selected {
            if !attacking and !crafting{
                state = scrStateInspired
                show_debug_message("Inspired")
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();

if(room == Outside)
{
    if(needsResourcePlacement)
    {
        scrPlaceResources();
        needsResourcePlacement = false;
    }
    if(isNewDay)
    {
        isNewDay = false;
        while(newPersonCount &gt; 0)
        {
            instance_create(objDoor.x,objDoor.y,objMan);
            newPersonCount--;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha(1 - fadeAlpha);
draw_set_font(fnPixelatedSmallest)

//drawing resource UI
var buffer = 4
draw_sprite(sprUIBox, 0, buffer, buffer)
var len = array_length_1d(sprArray)
var sprh = sprite_get_height(sprWood)
var sprw = sprite_get_width(sprWood)
for (i = 0; i &lt; len; i++) {
    var next = sprArray[i]
    var othernext = resources[i]
    draw_sprite(next, 0, buffer*(i+2) + (sprw/2)*(2*i+1), buffer*2)
    draw_set_colour(c_white)
    draw_text(buffer*(i+2) + sprw*i, buffer*2, othernext)
}  
draw_set_alpha(1);

//draws available food
sprh = sprite_get_height(sprUIBox)
if scrGUIButton(sprStew, sprGourmet, buffer, sprh + 2*buffer, buffer, objGame.stewCount, objGame.gourmetCount) = STEW {
    with objMan {
        energy += (fullEnergy - energy)/2
        objGame.stewCount--
    }
} else if scrGUIButton(sprStew, sprGourmet, buffer, sprh + 2*buffer, buffer, objGame.stewCount, objGame.gourmetCount) = GOURMET {
    with objMan {
        energy = fullEnergy
        objGame.gourmetCount--
    }
}

//draws health bars for living men
if instance_exists(objMan) {
    var sprnum = sprite_get_number(sprEnergyBar)
    var size = ds_list_size(manList)
    var buffer = sprite_get_height(sprEnergyBar)
    for (i = 0; i &lt; size; i++) {
        var next = ds_list_find_value(manList, i);
        if next.energy = 0 {
            draw_sprite_ext(sprEnergyBar,sprnum - 1,view_wport - 10,0+((2*i+1)*buffer),1,1,0,next.image_blend, 1 - fadeAlpha)
        } else {
            draw_sprite_ext(sprEnergyBar,sprnum-ceil(sprnum*(next.energy/next.fullEnergy)),view_wport - 10,0+((2*i+1)*buffer),1,1,0,next.image_blend, 1 - fadeAlpha)
        }
    }
}

draw_set_alpha(endOfDayAlpha);
draw_set_color(c_white);
draw_set_halign(fa_center);
draw_set_font(fnPixelated);

var hh = string_height("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
draw_text(view_wport[0] / 2, view_hport[0] / 2, "A New Day Begins");
draw_text_transformed(view_wport[0] / 2, (view_hport[0] / 2) + (2*hh), "tools left outside were lost during the night", 0.5, 0.5, 0);

draw_set_font(fnArial);
draw_set_halign(fa_left);
draw_set_color(c_black);
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if(surface_exists(roomTransitionSurface))
{
    surface_set_target(roomTransitionSurface);
    draw_clear(c_black);
    surface_reset_target();
    draw_surface_ext(roomTransitionSurface, 0, 0, 1, 1, 0, c_white, fadeAlpha);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
