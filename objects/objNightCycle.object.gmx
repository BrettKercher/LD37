<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-999</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize

//How fast time goes by
timeScale = 10;
dayNumber = 1;
  
startTime[DAWN] = 0;
startTime[DAY] = 360;   
startTime[DUSK] = 720;
startTime[NIGHT] = 1080; 
startTime[NIGHT+1] = 1440;

colourSet[DAWN] = make_colour_rgb(209,206,176)
colourSet[DAY] = make_colour_rgb(111,196,210)
colourSet[DUSK] = make_colour_rgb(50,130,200)
colourSet[NIGHT] = make_colour_rgb(43,106,166)
colourSet[NIGHT+1] = make_colour_rgb(22,25,74)

//Darkness values
alphaSet[DAWN] = 0.6;
alphaSet[DAY] = 0.1;
alphaSet[DUSK] = 0.1;
alphaSet[NIGHT] = 0.6;

transitionSpeed = 0.00075;

//Start at Dawn
phase = DAWN;
alpha = alphaSet[phase];
currentTime = startTime[phase];

//Texture to overlay
nightSurface = surface_create(room_width, room_height);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//NOTHING STOPS THE CRUSHING EMBRACE OF TIME
if(!objGame.endOfDay)
{
    currentTime += (1 / room_speed) * timeScale;
}

//ends the day at the conclusion of night phase
if(currentTime &gt; startTime[NIGHT+1])
{
    scrDoEndOfDay();
}

//changes skybox color
var mergePercent = (currentTime-startTime[phase])/(startTime[phase + 1]-startTime[phase]);
background_blend[0] = merge_colour(colourSet[phase], colourSet[phase + 1], mergePercent)

//day phase alpha transitions
if(phase == DAWN)
{
    if(alpha &gt; alphaSet[phase])
    {
        alpha -= transitionSpeed
    }
    
    if(currentTime &gt; startTime[phase + 1])
    {
        phase = DAY;
    }
}

if(phase == DAY)
{
    if(alpha &gt; alphaSet[phase])
    {
        alpha -= transitionSpeed
    }
    
    if(currentTime &gt; startTime[phase + 1])
    {
        phase = DUSK;
    }
}

if(phase == DUSK)
{
    if(alpha &lt; alphaSet[phase])
    {
        alpha += transitionSpeed
    }
    
    if(currentTime &gt; startTime[phase + 1])
    {
        phase = NIGHT;
    }
}

if(phase == NIGHT)
{
    if(alpha &lt; alphaSet[phase])
    {
        alpha += transitionSpeed
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//drawing timline
draw_set_alpha(1 - objGame.fadeAlpha)
draw_sprite(sprTimeLine, 0, view_wport/2, 0)
var sprw = sprite_get_width(sprTimeLine)
var sprh = sprite_get_height(sprTimeLine);
draw_sprite(sprSun,0, view_wport/2 - sprw/2 + sprw*(currentTime/startTime[NIGHT+1]), sprh/2)
draw_text(view_wport/2 - sprw/2 + sprw*(currentTime/startTime[NIGHT+1]), sprh/2, string(dayNumber))

//draws end day button
if scrGUIButton(sprEndDayButton, view_wport/2, sprh) {
    scrDoEndOfDay();
}

draw_set_alpha(1)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if(room == Outside) and surface_exists(nightSurface)
{
    surface_set_target(nightSurface);
    draw_clear(c_black);
    //Draw Glows
    with(objMan)
    {
        draw_set_blend_mode(bm_src_color);
        draw_sprite_ext(sprLightSourceGlow, 0, x, y + (sprite_get_width(sprMan) / 2), glowIntensity, glowIntensity, image_angle, image_blend, image_alpha);
        draw_set_blend_mode(bm_normal);
    }
    surface_reset_target();
    
    draw_surface_ext(nightSurface, 0, 0, 1, 1, 0, c_white, alpha);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
